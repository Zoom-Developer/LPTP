
from lptp.client.client import LPTPClient
from lptp.exceptions.client import ProcedureError
from lptp.types.pds import DataField, ProcedureDataStructure
from typing import *

# This file autogenerated on 19.05.2024 18:20:27 UTC
# Total procedure count is 3

class ProcedureManager:
    client: LPTPClient

    hash = "90cf1621c79563b353ddcf17cd80a47fa5a8da3e69a1a30654ff368a698f33e1"

    def __init__(self, client: LPTPClient = None) -> None:
        if client and not isinstance(client, LPTPClient):
            raise TypeError("client should be instance of LPTPClient")
        self.client = client
        self.client.hash = self.hash

    async def __aenter__(self) -> Self:
        await self.client.__aenter__()
        return self
    
    async def __aexit__(self, exc_type, exc, tb) -> None:
        return await self.client.__aexit__(exc_type, exc, tb)

    async def reverse_text(self, text: 0) -> str:
        res = await self.client.send_procedure(
            0x00,
            0x00,
            ProcedureDataStructure([
                DataField(0x00, text)
            ])
        )
        if not res.ok:
            raise ProcedureError("Server returned %s status" % res.status_code)
        return res.field.data

    async def sum_numbers(self, a: 0, b: 1) -> int:
        res = await self.client.send_procedure(
            0x01,
            0x00,
            ProcedureDataStructure([
                DataField(0x00, a),
				DataField(0x01, b)
            ])
        )
        if not res.ok:
            raise ProcedureError("Server returned %s status" % res.status_code)
        return res.field.data

    async def sum_numbers_list(self, nums: 0) -> int:
        res = await self.client.send_procedure(
            0x01,
            0x01,
            ProcedureDataStructure([
                DataField(0x00, nums)
            ])
        )
        if not res.ok:
            raise ProcedureError("Server returned %s status" % res.status_code)
        return res.field.data
